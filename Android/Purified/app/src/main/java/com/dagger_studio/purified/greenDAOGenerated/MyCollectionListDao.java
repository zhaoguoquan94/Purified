package com.dagger_studio.purified.greenDAOGenerated;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dagger_studio.purified.greenDAOGenerated.MyCollectionList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MY_COLLECTION_LIST.
*/
public class MyCollectionListDao extends AbstractDao<MyCollectionList, Long> {

    public static final String TABLENAME = "MY_COLLECTION_LIST";

    /**
     * Properties of entity MyCollectionList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ExpireLifeTime = new Property(1, long.class, "expireLifeTime", false, "EXPIRE_LIFE_TIME");
        public final static Property IsRead = new Property(2, boolean.class, "isRead", false, "IS_READ");
        public final static Property IsDivActivated = new Property(3, boolean.class, "isDivActivated", false, "IS_DIV_ACTIVATED");
        public final static Property IsTop = new Property(4, boolean.class, "isTop", false, "IS_TOP");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property ImgPath = new Property(7, String.class, "imgPath", false, "IMG_PATH");
    };


    public MyCollectionListDao(DaoConfig config) {
        super(config);
    }
    
    public MyCollectionListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MY_COLLECTION_LIST' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'EXPIRE_LIFE_TIME' INTEGER NOT NULL ," + // 1: expireLifeTime
                "'IS_READ' INTEGER NOT NULL ," + // 2: isRead
                "'IS_DIV_ACTIVATED' INTEGER NOT NULL ," + // 3: isDivActivated
                "'IS_TOP' INTEGER NOT NULL ," + // 4: isTop
                "'URL' TEXT NOT NULL ," + // 5: url
                "'TITLE' TEXT NOT NULL ," + // 6: title
                "'IMG_PATH' TEXT UNIQUE );"); // 7: imgPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MY_COLLECTION_LIST'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MyCollectionList entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getExpireLifeTime());
        stmt.bindLong(3, entity.getIsRead() ? 1l: 0l);
        stmt.bindLong(4, entity.getIsDivActivated() ? 1l: 0l);
        stmt.bindLong(5, entity.getIsTop() ? 1l: 0l);
        stmt.bindString(6, entity.getUrl());
        stmt.bindString(7, entity.getTitle());
 
        String imgPath = entity.getImgPath();
        if (imgPath != null) {
            stmt.bindString(8, imgPath);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MyCollectionList readEntity(Cursor cursor, int offset) {
        MyCollectionList entity = new MyCollectionList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // expireLifeTime
            cursor.getShort(offset + 2) != 0, // isRead
            cursor.getShort(offset + 3) != 0, // isDivActivated
            cursor.getShort(offset + 4) != 0, // isTop
            cursor.getString(offset + 5), // url
            cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // imgPath
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MyCollectionList entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExpireLifeTime(cursor.getLong(offset + 1));
        entity.setIsRead(cursor.getShort(offset + 2) != 0);
        entity.setIsDivActivated(cursor.getShort(offset + 3) != 0);
        entity.setIsTop(cursor.getShort(offset + 4) != 0);
        entity.setUrl(cursor.getString(offset + 5));
        entity.setTitle(cursor.getString(offset + 6));
        entity.setImgPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MyCollectionList entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MyCollectionList entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
